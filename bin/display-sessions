#!/bin/bash

# Define icons with colors
SESSION_ICON=""    # Icon for active tmux sessions
TMUXP_ICON=""     # Icon for tmuxp sessions
ZOXIDE_ICON=""    # Icon for zoxide entries

# Get the current tmux session
CURRENT_SESSION=$(tmux display-message -p '#S')

# List active tmux sessions and prepend the icon, excluding the current session
SESSIONS=$(tmux list-sessions -F "#{session_name}" | grep -v "^$CURRENT_SESSION$" | sed "s/^/$SESSION_ICON /")

# List tmuxp sessions from the .config/tmuxp directory, excluding active ones and the current session
# and only including those with valid start_directory paths
TMUXP_DIR="$HOME/.config/tmuxp"
if [ -d "$TMUXP_DIR" ]; then
  TMUXP_SESSIONS=""
  for file in "$TMUXP_DIR"/*.yaml; do
    session_name=$(yq e '.session_name' "$file")  # Extract session_name using yq
    start_directory=$(yq e '.start_directory' "$file")  # Extract start_directory using yq

    # Expand tilde (~) to the full home directory path
    start_directory=$(eval echo "$start_directory")

    # Get the base file name without extension for tmuxp session
    file_name=$(basename "$file" .yaml)

    # Check if the session is not active (including the current session) and if the start_directory exists
    if [ -d "$start_directory" ] && ! echo "$SESSIONS" | grep -q -F "$session_name" && [ "$session_name" != "$CURRENT_SESSION" ]; then
      TMUXP_SESSIONS+="$TMUXP_ICON $session_name ($file_name)"$'\n'
    fi
  done
fi

# List zoxide entries using `zoxide query -l` and replace the full home path with ~
# Use the full zoxide entry path for tmux session names
ZOXIDE_ENTRIES=$(zoxide query -l | awk -v home="$HOME" '{gsub(home, "~"); print "'$ZOXIDE_ICON' " $0}')

# Combine the session lists
COMBINED_SESSIONS=$(echo -e "$SESSIONS\n$TMUXP_SESSIONS\nZoxide Entries:\n$ZOXIDE_ENTRIES")

# Display the sessions in a fzf popup and allow the user to select one
SELECTED_SESSION=$(echo -e "$COMBINED_SESSIONS" | fzf --layout=reverse --border --header="Sessions and Zoxide Entries")

# Exit if no session is selected (Escape or empty selection)
if [ -z "$SELECTED_SESSION" ]; then
  exit 0
fi

# Strip the icon and session name (with file name) from the selected session
# Format: "ICON session_name (file_name)" or "ICON zoxide_entry"
STRIPPED_SESSION="${SELECTED_SESSION#* }"
SESSION_NAME=$(echo "$STRIPPED_SESSION" | sed -e 's/ (.*)//')
FILE_NAME=$(echo "$STRIPPED_SESSION" | sed -e 's/.* (\(.*\))$/\1/')
ZOXIDE_PATH=$(echo "$STRIPPED_SESSION" | sed -e "s/^$ZOXIDE_ICON //")

# Handle tmux session or tmuxp session or zoxide entry
if echo "$SESSIONS" | grep -q -F "$SESSION_NAME"; then
  # Switch to the selected tmux session
  tmux switch-client -t "$SESSION_NAME"
elif echo "$TMUXP_SESSIONS" | grep -q -F "$SESSION_NAME"; then
  # Load the tmuxp session in detached mode using the file name
  if tmuxp load -d "$TMUXP_DIR/$FILE_NAME.yaml"; then
    # Immediately switch to the newly loaded session
    tmux switch-client -t "$SESSION_NAME"
  else
    echo "Failed to load tmuxp session from file: $TMUXP_DIR/$FILE_NAME.yaml" >&2
    exit 1
  fi
elif [ -n "$ZOXIDE_PATH" ]; then
  # Use the full zoxide path as the tmux session name
  FINAL_PATH=$(eval echo "$ZOXIDE_PATH")
  # Check if a session with this name already exists
  if tmux has-session -t "$FINAL_PATH" 2>/dev/null; then
    # If the session exists, switch to it
    tmux switch-client -t "$FINAL_PATH"
  else
    # Create a new tmux session in the selected directory
    tmux new-session -d -c "$FINAL_PATH" -s "$ZOXIDE_PATH"
    # Attach to the newly created session
    tmux switch-client -t "$FINAL_PATH"
  fi
else
  echo "No matching tmux, tmuxp, or zoxide entry found for: $SESSION_NAME" >&2
  exit 1
fi

